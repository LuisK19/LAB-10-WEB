{
	"info": {
		"_postman_id": "12345678-1234-1234-1234-123456789012",
		"name": "Laboratorio 8 - API REST",
		"description": "API REST para Laboratorio 8 - IC8057\nAPI con autenticaci√≥n mediante API Key y JWT, con soporte para JSON y XML",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Login - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('token');",
									"    pm.environment.set('jwt_token', jsonData.token);",
									"});",
									"",
									"pm.test(\"Response has user data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('user');",
									"    pm.expect(jsonData.user).to.have.property('username');",
									"    pm.expect(jsonData.user).to.have.property('role');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{api_key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"admin123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Invalid Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Error response format\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"    pm.expect(jsonData.error).to.have.property('code');",
									"    pm.expect(jsonData.error).to.have.property('message');",
									"    pm.expect(jsonData.error).to.have.property('timestamp');",
									"    pm.expect(jsonData.error).to.have.property('path');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{api_key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"wrongpassword\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Missing API Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Error message for missing API Key\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.message).to.include('API Key is required');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"admin123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Validation Error (422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Validation error message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.code).to.eql('VALIDATION_ERROR');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{api_key}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"\",\n    \"password\": \"\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Products - Public (API Key)",
			"item": [
				{
					"name": "Get All Products - JSON",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has data and pagination\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData).to.have.property('pagination');",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{api_key}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/products?page=1&limit=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Products - XML",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is XML\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/xml');",
									"});",
									"",
									"pm.test(\"Response is valid XML\", function () {",
									"    pm.expect(pm.response.text()).to.include('<?xml');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{api_key}}"
							},
							{
								"key": "Accept",
								"value": "application/xml"
							}
						],
						"url": {
							"raw": "{{base_url}}/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Product by ID - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has product data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('name');",
									"    pm.expect(jsonData.data).to.have.property('sku');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{api_key}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/products/da341620-a4ca-4dc6-a382-b7b53bd6d37c",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								"da341620-a4ca-4dc6-a382-b7b53bd6d37c"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Product by ID - Not Found (404)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error response format\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.code).to.eql('NOT_FOUND');",
									"    pm.expect(jsonData.error.message).to.include('Product not found');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{api_key}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/products/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								"00000000-0000-0000-0000-000000000000"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Products - Missing API Key (401)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Missing API Key error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.message).to.include('API Key is required');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Products - Protected (JWT)",
			"item": [
				{
					"name": "Create Product - Success (Editor)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Login first to get JWT token",
									"const loginRequest = {",
									"    url: pm.environment.get('base_url') + '/auth/login',",
									"    method: 'POST',",
									"    header: {",
									"        'Content-Type': 'application/json',",
									"        'x-api-key': pm.environment.get('api_key')",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            username: 'editor',",
									"            password: 'editor123'",
									"        })",
									"    }",
									"};",
									"",
									"pm.sendRequest(loginRequest, function (err, response) {",
									"    if (err) {",
									"        console.log(err);",
									"    } else {",
									"        const jsonData = response.json();",
									"        pm.environment.set('jwt_token', jsonData.token);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Product created successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Producto de Prueba\",\n    \"sku\": \"TEST-001\",\n    \"price\": 99.99,\n    \"stock\": 25,\n    \"category\": \"Test\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Product - SKU Conflict (409)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									"",
									"pm.test(\"Conflict error message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.code).to.eql('CONFLICT');",
									"    pm.expect(jsonData.error.message).to.include('SKU already exists');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Producto Duplicado\",\n    \"sku\": \"LAP-GAM-001\",\n    \"price\": 99.99,\n    \"stock\": 25,\n    \"category\": \"Test\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Product - Validation Error (422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Validation error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.code).to.eql('VALIDATION_ERROR');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"\",\n    \"sku\": \"\",\n    \"price\": -10,\n    \"stock\": -5,\n    \"category\": \"\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Product - Unauthorized (401)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Unauthorized error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.code).to.eql('UNAUTHORIZED');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Producto Sin Token\",\n    \"sku\": \"NO-TOKEN-001\",\n    \"price\": 99.99,\n    \"stock\": 25,\n    \"category\": \"Test\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Product - Success (Editor)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Product updated successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Laptop Gaming Actualizada\",\n    \"price\": 1299.99,\n    \"stock\": 12\n}"
						},
						"url": {
							"raw": "{{base_url}}/products/da341620-a4ca-4dc6-a382-b7b53bd6d37c",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								"da341620-a4ca-4dc6-a382-b7b53bd6d37c"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Product - Success (Admin Only)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Login as admin to get JWT token",
									"const loginRequest = {",
									"    url: pm.environment.get('base_url') + '/auth/login',",
									"    method: 'POST',",
									"    header: {",
									"        'Content-Type': 'application/json',",
									"        'x-api-key': pm.environment.get('api_key')",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            username: 'admin',",
									"            password: 'admin123'",
									"        })",
									"    }",
									"};",
									"",
									"pm.sendRequest(loginRequest, function (err, response) {",
									"    if (err) {",
									"        console.log(err);",
									"    } else {",
									"        const jsonData = response.json();",
									"        pm.environment.set('jwt_token', jsonData.token);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/products/64ae9672-b8fe-45c2-922a-de091b6d8708",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								"64ae9672-b8fe-45c2-922a-de091b6d8708"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Product - Forbidden (403) - Editor Role",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Login as editor (should not be able to delete)",
									"const loginRequest = {",
									"    url: pm.environment.get('base_url') + '/auth/login',",
									"    method: 'POST',",
									"    header: {",
									"        'Content-Type': 'application/json',",
									"        'x-api-key': pm.environment.get('api_key')",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            username: 'editor',",
									"            password: 'editor123'",
									"        })",
									"    }",
									"};",
									"",
									"pm.sendRequest(loginRequest, function (err, response) {",
									"    if (err) {",
									"        console.log(err);",
									"    } else {",
									"        const jsonData = response.json();",
									"        pm.environment.set('jwt_token', jsonData.token);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Forbidden error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.code).to.eql('FORBIDDEN');",
									"    pm.expect(jsonData.error.message).to.include('Insufficient permissions');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/products/da341620-a4ca-4dc6-a382-b7b53bd6d37c",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								"da341620-a4ca-4dc6-a382-b7b53bd6d37c"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:3000",
			"type": "string"
		},
		{
			"key": "api_key",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Ind2bmtpdGNvcWJyd3Z0ZndrbXV2Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1OTQ1MzU3MiwiZXhwIjoyMDc1MDI5NTcyfQ.slqQrZ5HFEqE9lftu_SYuDKQByFb0hILZzWy0j3yoj4",
			"type": "string"
		},
		{
			"key": "jwt_token",
			"value": "",
			"type": "string"
		}
	]
}
